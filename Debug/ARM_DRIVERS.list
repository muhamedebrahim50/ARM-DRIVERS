
ARM_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001498  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e4  080015e4  00022f24  2**0
                  CONTENTS
  4 .ARM          00000000  080015e4  080015e4  00022f24  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e4  080015e4  00022f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002f24  20000000  080015ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20002f24  08004510  00022f24  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f64  08004510  00022f64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00022f24  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cc2  00000000  00000000  00022f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a2  00000000  00000000  00024c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000253b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  000255b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000edc  00000000  00000000  00025740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e83  00000000  00000000  0002661c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000043ae  00000000  00000000  0002749f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002b84d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007a4  00000000  00000000  0002b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20002f24 	.word	0x20002f24
 800014c:	00000000 	.word	0x00000000
 8000150:	080015b0 	.word	0x080015b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20002f28 	.word	0x20002f28
 800016c:	080015b0 	.word	0x080015b0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_d2uiz>:
 80004e8:	004a      	lsls	r2, r1, #1
 80004ea:	d211      	bcs.n	8000510 <__aeabi_d2uiz+0x28>
 80004ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004f0:	d211      	bcs.n	8000516 <__aeabi_d2uiz+0x2e>
 80004f2:	d50d      	bpl.n	8000510 <__aeabi_d2uiz+0x28>
 80004f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80004f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004fc:	d40e      	bmi.n	800051c <__aeabi_d2uiz+0x34>
 80004fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000502:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000506:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800050a:	fa23 f002 	lsr.w	r0, r3, r2
 800050e:	4770      	bx	lr
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	4770      	bx	lr
 8000516:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800051a:	d102      	bne.n	8000522 <__aeabi_d2uiz+0x3a>
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	4770      	bx	lr
 8000522:	f04f 0000 	mov.w	r0, #0
 8000526:	4770      	bx	lr

08000528 <__aeabi_frsub>:
 8000528:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800052c:	e002      	b.n	8000534 <__addsf3>
 800052e:	bf00      	nop

08000530 <__aeabi_fsub>:
 8000530:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000534 <__addsf3>:
 8000534:	0042      	lsls	r2, r0, #1
 8000536:	bf1f      	itttt	ne
 8000538:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800053c:	ea92 0f03 	teqne	r2, r3
 8000540:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000544:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000548:	d06a      	beq.n	8000620 <__addsf3+0xec>
 800054a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800054e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000552:	bfc1      	itttt	gt
 8000554:	18d2      	addgt	r2, r2, r3
 8000556:	4041      	eorgt	r1, r0
 8000558:	4048      	eorgt	r0, r1
 800055a:	4041      	eorgt	r1, r0
 800055c:	bfb8      	it	lt
 800055e:	425b      	neglt	r3, r3
 8000560:	2b19      	cmp	r3, #25
 8000562:	bf88      	it	hi
 8000564:	4770      	bxhi	lr
 8000566:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800056a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800056e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000572:	bf18      	it	ne
 8000574:	4240      	negne	r0, r0
 8000576:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800057e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000582:	bf18      	it	ne
 8000584:	4249      	negne	r1, r1
 8000586:	ea92 0f03 	teq	r2, r3
 800058a:	d03f      	beq.n	800060c <__addsf3+0xd8>
 800058c:	f1a2 0201 	sub.w	r2, r2, #1
 8000590:	fa41 fc03 	asr.w	ip, r1, r3
 8000594:	eb10 000c 	adds.w	r0, r0, ip
 8000598:	f1c3 0320 	rsb	r3, r3, #32
 800059c:	fa01 f103 	lsl.w	r1, r1, r3
 80005a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005a4:	d502      	bpl.n	80005ac <__addsf3+0x78>
 80005a6:	4249      	negs	r1, r1
 80005a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005b0:	d313      	bcc.n	80005da <__addsf3+0xa6>
 80005b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005b6:	d306      	bcc.n	80005c6 <__addsf3+0x92>
 80005b8:	0840      	lsrs	r0, r0, #1
 80005ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80005be:	f102 0201 	add.w	r2, r2, #1
 80005c2:	2afe      	cmp	r2, #254	; 0xfe
 80005c4:	d251      	bcs.n	800066a <__addsf3+0x136>
 80005c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80005ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ce:	bf08      	it	eq
 80005d0:	f020 0001 	biceq.w	r0, r0, #1
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	4770      	bx	lr
 80005da:	0049      	lsls	r1, r1, #1
 80005dc:	eb40 0000 	adc.w	r0, r0, r0
 80005e0:	3a01      	subs	r2, #1
 80005e2:	bf28      	it	cs
 80005e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80005e8:	d2ed      	bcs.n	80005c6 <__addsf3+0x92>
 80005ea:	fab0 fc80 	clz	ip, r0
 80005ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80005f2:	ebb2 020c 	subs.w	r2, r2, ip
 80005f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005fa:	bfaa      	itet	ge
 80005fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000600:	4252      	neglt	r2, r2
 8000602:	4318      	orrge	r0, r3
 8000604:	bfbc      	itt	lt
 8000606:	40d0      	lsrlt	r0, r2
 8000608:	4318      	orrlt	r0, r3
 800060a:	4770      	bx	lr
 800060c:	f092 0f00 	teq	r2, #0
 8000610:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000614:	bf06      	itte	eq
 8000616:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800061a:	3201      	addeq	r2, #1
 800061c:	3b01      	subne	r3, #1
 800061e:	e7b5      	b.n	800058c <__addsf3+0x58>
 8000620:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000624:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000628:	bf18      	it	ne
 800062a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800062e:	d021      	beq.n	8000674 <__addsf3+0x140>
 8000630:	ea92 0f03 	teq	r2, r3
 8000634:	d004      	beq.n	8000640 <__addsf3+0x10c>
 8000636:	f092 0f00 	teq	r2, #0
 800063a:	bf08      	it	eq
 800063c:	4608      	moveq	r0, r1
 800063e:	4770      	bx	lr
 8000640:	ea90 0f01 	teq	r0, r1
 8000644:	bf1c      	itt	ne
 8000646:	2000      	movne	r0, #0
 8000648:	4770      	bxne	lr
 800064a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800064e:	d104      	bne.n	800065a <__addsf3+0x126>
 8000650:	0040      	lsls	r0, r0, #1
 8000652:	bf28      	it	cs
 8000654:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000658:	4770      	bx	lr
 800065a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800065e:	bf3c      	itt	cc
 8000660:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000664:	4770      	bxcc	lr
 8000666:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800066a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800066e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000672:	4770      	bx	lr
 8000674:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000678:	bf16      	itet	ne
 800067a:	4608      	movne	r0, r1
 800067c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000680:	4601      	movne	r1, r0
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	bf06      	itte	eq
 8000686:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800068a:	ea90 0f01 	teqeq	r0, r1
 800068e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000692:	4770      	bx	lr

08000694 <__aeabi_ui2f>:
 8000694:	f04f 0300 	mov.w	r3, #0
 8000698:	e004      	b.n	80006a4 <__aeabi_i2f+0x8>
 800069a:	bf00      	nop

0800069c <__aeabi_i2f>:
 800069c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006a0:	bf48      	it	mi
 80006a2:	4240      	negmi	r0, r0
 80006a4:	ea5f 0c00 	movs.w	ip, r0
 80006a8:	bf08      	it	eq
 80006aa:	4770      	bxeq	lr
 80006ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006b0:	4601      	mov	r1, r0
 80006b2:	f04f 0000 	mov.w	r0, #0
 80006b6:	e01c      	b.n	80006f2 <__aeabi_l2f+0x2a>

080006b8 <__aeabi_ul2f>:
 80006b8:	ea50 0201 	orrs.w	r2, r0, r1
 80006bc:	bf08      	it	eq
 80006be:	4770      	bxeq	lr
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	e00a      	b.n	80006dc <__aeabi_l2f+0x14>
 80006c6:	bf00      	nop

080006c8 <__aeabi_l2f>:
 80006c8:	ea50 0201 	orrs.w	r2, r0, r1
 80006cc:	bf08      	it	eq
 80006ce:	4770      	bxeq	lr
 80006d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80006d4:	d502      	bpl.n	80006dc <__aeabi_l2f+0x14>
 80006d6:	4240      	negs	r0, r0
 80006d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006dc:	ea5f 0c01 	movs.w	ip, r1
 80006e0:	bf02      	ittt	eq
 80006e2:	4684      	moveq	ip, r0
 80006e4:	4601      	moveq	r1, r0
 80006e6:	2000      	moveq	r0, #0
 80006e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80006ec:	bf08      	it	eq
 80006ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006f6:	fabc f28c 	clz	r2, ip
 80006fa:	3a08      	subs	r2, #8
 80006fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000700:	db10      	blt.n	8000724 <__aeabi_l2f+0x5c>
 8000702:	fa01 fc02 	lsl.w	ip, r1, r2
 8000706:	4463      	add	r3, ip
 8000708:	fa00 fc02 	lsl.w	ip, r0, r2
 800070c:	f1c2 0220 	rsb	r2, r2, #32
 8000710:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000714:	fa20 f202 	lsr.w	r2, r0, r2
 8000718:	eb43 0002 	adc.w	r0, r3, r2
 800071c:	bf08      	it	eq
 800071e:	f020 0001 	biceq.w	r0, r0, #1
 8000722:	4770      	bx	lr
 8000724:	f102 0220 	add.w	r2, r2, #32
 8000728:	fa01 fc02 	lsl.w	ip, r1, r2
 800072c:	f1c2 0220 	rsb	r2, r2, #32
 8000730:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000734:	fa21 f202 	lsr.w	r2, r1, r2
 8000738:	eb43 0002 	adc.w	r0, r3, r2
 800073c:	bf08      	it	eq
 800073e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000742:	4770      	bx	lr

08000744 <__aeabi_fmul>:
 8000744:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000748:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800074c:	bf1e      	ittt	ne
 800074e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000752:	ea92 0f0c 	teqne	r2, ip
 8000756:	ea93 0f0c 	teqne	r3, ip
 800075a:	d06f      	beq.n	800083c <__aeabi_fmul+0xf8>
 800075c:	441a      	add	r2, r3
 800075e:	ea80 0c01 	eor.w	ip, r0, r1
 8000762:	0240      	lsls	r0, r0, #9
 8000764:	bf18      	it	ne
 8000766:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800076a:	d01e      	beq.n	80007aa <__aeabi_fmul+0x66>
 800076c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000770:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000774:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000778:	fba0 3101 	umull	r3, r1, r0, r1
 800077c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000780:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000784:	bf3e      	ittt	cc
 8000786:	0049      	lslcc	r1, r1, #1
 8000788:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800078c:	005b      	lslcc	r3, r3, #1
 800078e:	ea40 0001 	orr.w	r0, r0, r1
 8000792:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000796:	2afd      	cmp	r2, #253	; 0xfd
 8000798:	d81d      	bhi.n	80007d6 <__aeabi_fmul+0x92>
 800079a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800079e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007a2:	bf08      	it	eq
 80007a4:	f020 0001 	biceq.w	r0, r0, #1
 80007a8:	4770      	bx	lr
 80007aa:	f090 0f00 	teq	r0, #0
 80007ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007b2:	bf08      	it	eq
 80007b4:	0249      	lsleq	r1, r1, #9
 80007b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007be:	3a7f      	subs	r2, #127	; 0x7f
 80007c0:	bfc2      	ittt	gt
 80007c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007ca:	4770      	bxgt	lr
 80007cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	3a01      	subs	r2, #1
 80007d6:	dc5d      	bgt.n	8000894 <__aeabi_fmul+0x150>
 80007d8:	f112 0f19 	cmn.w	r2, #25
 80007dc:	bfdc      	itt	le
 80007de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80007e2:	4770      	bxle	lr
 80007e4:	f1c2 0200 	rsb	r2, r2, #0
 80007e8:	0041      	lsls	r1, r0, #1
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	f1c2 0220 	rsb	r2, r2, #32
 80007f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007fa:	f140 0000 	adc.w	r0, r0, #0
 80007fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000802:	bf08      	it	eq
 8000804:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000808:	4770      	bx	lr
 800080a:	f092 0f00 	teq	r2, #0
 800080e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000812:	bf02      	ittt	eq
 8000814:	0040      	lsleq	r0, r0, #1
 8000816:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800081a:	3a01      	subeq	r2, #1
 800081c:	d0f9      	beq.n	8000812 <__aeabi_fmul+0xce>
 800081e:	ea40 000c 	orr.w	r0, r0, ip
 8000822:	f093 0f00 	teq	r3, #0
 8000826:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800082a:	bf02      	ittt	eq
 800082c:	0049      	lsleq	r1, r1, #1
 800082e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000832:	3b01      	subeq	r3, #1
 8000834:	d0f9      	beq.n	800082a <__aeabi_fmul+0xe6>
 8000836:	ea41 010c 	orr.w	r1, r1, ip
 800083a:	e78f      	b.n	800075c <__aeabi_fmul+0x18>
 800083c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000840:	ea92 0f0c 	teq	r2, ip
 8000844:	bf18      	it	ne
 8000846:	ea93 0f0c 	teqne	r3, ip
 800084a:	d00a      	beq.n	8000862 <__aeabi_fmul+0x11e>
 800084c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000850:	bf18      	it	ne
 8000852:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000856:	d1d8      	bne.n	800080a <__aeabi_fmul+0xc6>
 8000858:	ea80 0001 	eor.w	r0, r0, r1
 800085c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000860:	4770      	bx	lr
 8000862:	f090 0f00 	teq	r0, #0
 8000866:	bf17      	itett	ne
 8000868:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800086c:	4608      	moveq	r0, r1
 800086e:	f091 0f00 	teqne	r1, #0
 8000872:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000876:	d014      	beq.n	80008a2 <__aeabi_fmul+0x15e>
 8000878:	ea92 0f0c 	teq	r2, ip
 800087c:	d101      	bne.n	8000882 <__aeabi_fmul+0x13e>
 800087e:	0242      	lsls	r2, r0, #9
 8000880:	d10f      	bne.n	80008a2 <__aeabi_fmul+0x15e>
 8000882:	ea93 0f0c 	teq	r3, ip
 8000886:	d103      	bne.n	8000890 <__aeabi_fmul+0x14c>
 8000888:	024b      	lsls	r3, r1, #9
 800088a:	bf18      	it	ne
 800088c:	4608      	movne	r0, r1
 800088e:	d108      	bne.n	80008a2 <__aeabi_fmul+0x15e>
 8000890:	ea80 0001 	eor.w	r0, r0, r1
 8000894:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000898:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800089c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008a0:	4770      	bx	lr
 80008a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008aa:	4770      	bx	lr

080008ac <__aeabi_fdiv>:
 80008ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008b4:	bf1e      	ittt	ne
 80008b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008ba:	ea92 0f0c 	teqne	r2, ip
 80008be:	ea93 0f0c 	teqne	r3, ip
 80008c2:	d069      	beq.n	8000998 <__aeabi_fdiv+0xec>
 80008c4:	eba2 0203 	sub.w	r2, r2, r3
 80008c8:	ea80 0c01 	eor.w	ip, r0, r1
 80008cc:	0249      	lsls	r1, r1, #9
 80008ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008d2:	d037      	beq.n	8000944 <__aeabi_fdiv+0x98>
 80008d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008e4:	428b      	cmp	r3, r1
 80008e6:	bf38      	it	cc
 80008e8:	005b      	lslcc	r3, r3, #1
 80008ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80008ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80008f2:	428b      	cmp	r3, r1
 80008f4:	bf24      	itt	cs
 80008f6:	1a5b      	subcs	r3, r3, r1
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000900:	bf24      	itt	cs
 8000902:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000906:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800090e:	bf24      	itt	cs
 8000910:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800091c:	bf24      	itt	cs
 800091e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000922:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	bf18      	it	ne
 800092a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800092e:	d1e0      	bne.n	80008f2 <__aeabi_fdiv+0x46>
 8000930:	2afd      	cmp	r2, #253	; 0xfd
 8000932:	f63f af50 	bhi.w	80007d6 <__aeabi_fmul+0x92>
 8000936:	428b      	cmp	r3, r1
 8000938:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000948:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800094c:	327f      	adds	r2, #127	; 0x7f
 800094e:	bfc2      	ittt	gt
 8000950:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000954:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000958:	4770      	bxgt	lr
 800095a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800095e:	f04f 0300 	mov.w	r3, #0
 8000962:	3a01      	subs	r2, #1
 8000964:	e737      	b.n	80007d6 <__aeabi_fmul+0x92>
 8000966:	f092 0f00 	teq	r2, #0
 800096a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800096e:	bf02      	ittt	eq
 8000970:	0040      	lsleq	r0, r0, #1
 8000972:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000976:	3a01      	subeq	r2, #1
 8000978:	d0f9      	beq.n	800096e <__aeabi_fdiv+0xc2>
 800097a:	ea40 000c 	orr.w	r0, r0, ip
 800097e:	f093 0f00 	teq	r3, #0
 8000982:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000986:	bf02      	ittt	eq
 8000988:	0049      	lsleq	r1, r1, #1
 800098a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800098e:	3b01      	subeq	r3, #1
 8000990:	d0f9      	beq.n	8000986 <__aeabi_fdiv+0xda>
 8000992:	ea41 010c 	orr.w	r1, r1, ip
 8000996:	e795      	b.n	80008c4 <__aeabi_fdiv+0x18>
 8000998:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800099c:	ea92 0f0c 	teq	r2, ip
 80009a0:	d108      	bne.n	80009b4 <__aeabi_fdiv+0x108>
 80009a2:	0242      	lsls	r2, r0, #9
 80009a4:	f47f af7d 	bne.w	80008a2 <__aeabi_fmul+0x15e>
 80009a8:	ea93 0f0c 	teq	r3, ip
 80009ac:	f47f af70 	bne.w	8000890 <__aeabi_fmul+0x14c>
 80009b0:	4608      	mov	r0, r1
 80009b2:	e776      	b.n	80008a2 <__aeabi_fmul+0x15e>
 80009b4:	ea93 0f0c 	teq	r3, ip
 80009b8:	d104      	bne.n	80009c4 <__aeabi_fdiv+0x118>
 80009ba:	024b      	lsls	r3, r1, #9
 80009bc:	f43f af4c 	beq.w	8000858 <__aeabi_fmul+0x114>
 80009c0:	4608      	mov	r0, r1
 80009c2:	e76e      	b.n	80008a2 <__aeabi_fmul+0x15e>
 80009c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009c8:	bf18      	it	ne
 80009ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009ce:	d1ca      	bne.n	8000966 <__aeabi_fdiv+0xba>
 80009d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80009d4:	f47f af5c 	bne.w	8000890 <__aeabi_fmul+0x14c>
 80009d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80009dc:	f47f af3c 	bne.w	8000858 <__aeabi_fmul+0x114>
 80009e0:	e75f      	b.n	80008a2 <__aeabi_fmul+0x15e>
 80009e2:	bf00      	nop

080009e4 <__aeabi_f2uiz>:
 80009e4:	0042      	lsls	r2, r0, #1
 80009e6:	d20e      	bcs.n	8000a06 <__aeabi_f2uiz+0x22>
 80009e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009ec:	d30b      	bcc.n	8000a06 <__aeabi_f2uiz+0x22>
 80009ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009f6:	d409      	bmi.n	8000a0c <__aeabi_f2uiz+0x28>
 80009f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a00:	fa23 f002 	lsr.w	r0, r3, r2
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr
 8000a0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a10:	d101      	bne.n	8000a16 <__aeabi_f2uiz+0x32>
 8000a12:	0242      	lsls	r2, r0, #9
 8000a14:	d102      	bne.n	8000a1c <__aeabi_f2uiz+0x38>
 8000a16:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <DMA_Init>:
 #include"DMA_Private.h"
 #include"DMA_Configration.h"
 #include"DMA_interface.h"

void DMA_Init(DMA_ChannelConfig_t * Copy_PStr)
 {
 8000a24:	b490      	push	{r4, r7}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	*3-memory size
	*4-Peripheral size
	*5-Memory increment mode
	*6-Peripheral increment mode
	*/
	DMA->CHANNEL[Copy_PStr->Channel_Id].CCR=((Copy_PStr->MtoM_mode)<<MEM2MEM)|((Copy_PStr->Channel_Priority)<<PL)|((Copy_PStr->Memory_Size)<<MSIZE)|((Copy_PStr->Peripheral_Size)<<PSIZE)|((Copy_PStr->MINC_mode)<<MINC)|((Copy_PStr->PINC_mode)<<PINC);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7c9b      	ldrb	r3, [r3, #18]
 8000a30:	039a      	lsls	r2, r3, #14
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	031b      	lsls	r3, r3, #12
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	029b      	lsls	r3, r3, #10
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7cdb      	ldrb	r3, [r3, #19]
 8000a4e:	01db      	lsls	r3, r3, #7
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7d1b      	ldrb	r3, [r3, #20]
 8000a56:	019b      	lsls	r3, r3, #6
 8000a58:	ea42 0003 	orr.w	r0, r2, r3
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <DMA_Init+0xb0>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	460b      	mov	r3, r1
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3308      	adds	r3, #8
 8000a70:	6018      	str	r0, [r3, #0]
	*3-Transfer error interrupt enable
	*4-Half transfer interrupt enable
	*5-TCIE: Transfer complete interrupt enable
	*/
	
	DMA->CHANNEL[Copy_PStr->Channel_Id].CCR|=(Copy_PStr->CIRC_mode<<CIRC)|(Copy_PStr->Data_Dir<<DIR)|(Copy_PStr->Trans_err_EN<<TEIE)|(Copy_PStr->HalfTrans_err_EN<<HTIE)|(Copy_PStr->TransComp_err_EN<<TCIE);
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <DMA_Init+0xb0>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3308      	adds	r3, #8
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7d52      	ldrb	r2, [r2, #21]
 8000a8c:	0151      	lsls	r1, r2, #5
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	7912      	ldrb	r2, [r2, #4]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	4311      	orrs	r1, r2
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	7d92      	ldrb	r2, [r2, #22]
 8000a9a:	00d2      	lsls	r2, r2, #3
 8000a9c:	4311      	orrs	r1, r2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	7dd2      	ldrb	r2, [r2, #23]
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4311      	orrs	r1, r2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	7e12      	ldrb	r2, [r2, #24]
 8000aaa:	0052      	lsls	r2, r2, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	4614      	mov	r4, r2
 8000ab0:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <DMA_Init+0xb0>)
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	7812      	ldrb	r2, [r2, #0]
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	ea43 0204 	orr.w	r2, r3, r4
 8000abc:	4603      	mov	r3, r0
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4403      	add	r3, r0
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3308      	adds	r3, #8
 8000ac8:	601a      	str	r2, [r3, #0]
 
 }
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc90      	pop	{r4, r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <GPIO_PinMode_Init>:
 #include"GPIO_interface.h"

 GPIO_RegDef_t*GPIO_APStrGPIOPORT[3]={GPIOA,GPIOB,GPIOC};
 
 void GPIO_PinMode_Init	(const GPIO_PinMode_t * Copy_GPIO_PinMode)
 {
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	 u8 pinmode=Copy_GPIO_PinMode->PinMode;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	73fb      	strb	r3, [r7, #15]

	 if(pinmode == GPIO_u8_INPUT_PULL_UP)
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b18      	cmp	r3, #24
 8000aea:	d111      	bne.n	8000b10 <GPIO_PinMode_Init+0x38>
	 {
		 CLRBit(pinmode,4);
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	f023 0310 	bic.w	r3, r3, #16
 8000af2:	73fb      	strb	r3, [r7, #15]
		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->BSRR=  (1<<(Copy_GPIO_PinMode->PinId));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	461a      	mov	r2, r3
 8000afa:	2301      	movs	r3, #1
 8000afc:	fa03 f202 	lsl.w	r2, r3, r2
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	e00f      	b.n	8000b30 <GPIO_PinMode_Init+0x58>
	 }
	 
	 else if(pinmode == GPIO_u8_INPUT_PULL_DOWN)
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d10c      	bne.n	8000b30 <GPIO_PinMode_Init+0x58>
	 {
		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->BRR=  (1<<(Copy_GPIO_PinMode->PinId));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	785b      	ldrb	r3, [r3, #1]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	fa03 f202 	lsl.w	r2, r3, r2
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	4b38      	ldr	r3, [pc, #224]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b2e:	615a      	str	r2, [r3, #20]
	 }
	 else{}
	 if((Copy_GPIO_PinMode->PinId)>=PIN0 && (Copy_GPIO_PinMode->PinId)<=PIN7)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	785b      	ldrb	r3, [r3, #1]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d82d      	bhi.n	8000b94 <GPIO_PinMode_Init+0xbc>
	 {
		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->CRL &= ~((0b1111)<<(4*(Copy_GPIO_PinMode->PinId)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	785b      	ldrb	r3, [r3, #1]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b62:	400a      	ands	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->CRL |=  ((pinmode)<<(4*(Copy_GPIO_PinMode->PinId)));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	7bf9      	ldrb	r1, [r7, #15]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000b8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
	 		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->CRH |=  ((pinmode)<<(4*((Copy_GPIO_PinMode->PinId)-8)));
	 	 }
	 else{}


 }
 8000b92:	e036      	b.n	8000c02 <GPIO_PinMode_Init+0x12a>
	 else if((Copy_GPIO_PinMode->PinId)>=PIN8 && (Copy_GPIO_PinMode->PinId)<=PIN15)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	d932      	bls.n	8000c02 <GPIO_PinMode_Init+0x12a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	785b      	ldrb	r3, [r3, #1]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d82e      	bhi.n	8000c02 <GPIO_PinMode_Init+0x12a>
	 		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->CRH &= ~((0b1111)<<(4*((Copy_GPIO_PinMode->PinId)-8)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	785b      	ldrb	r3, [r3, #1]
 8000bb6:	3b08      	subs	r3, #8
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	210f      	movs	r1, #15
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000bcc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	605a      	str	r2, [r3, #4]
	 		 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->CRH |=  ((pinmode)<<(4*((Copy_GPIO_PinMode->PinId)-8)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	7bf9      	ldrb	r1, [r7, #15]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	785b      	ldrb	r3, [r3, #1]
 8000be8:	3b08      	subs	r3, #8
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <GPIO_PinMode_Init+0x134>)
 8000bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	605a      	str	r2, [r3, #4]
 }
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000000 	.word	0x20000000

08000c10 <GPIO_TogglePin>:
	 {
	 	 GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->BRR=  (1<<(Copy_GPIO_PinMode->PinId));
	 }
 }
 void GPIO_TogglePin	(const GPIO_PinMode_t * Copy_GPIO_PinMode)
 {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	 TGLBit((GPIO_APStrGPIOPORT[Copy_GPIO_PinMode->PortId]->ODR),(Copy_GPIO_PinMode->PinId));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <GPIO_TogglePin+0x3c>)
 8000c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	408b      	lsls	r3, r1
 8000c30:	4619      	mov	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <GPIO_TogglePin+0x3c>)
 8000c3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000c3e:	404a      	eors	r2, r1
 8000c40:	60da      	str	r2, [r3, #12]
 }
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000000 	.word	0x20000000

08000c50 <NVIC_u8EnableInterrupt>:
#include"NVIC_Interface.h"

#define SCB_u32_AIRCR_REG                       *((volatile u32*)(0xE000ED00+0x0c))

u8 NVIC_u8EnableInterrupt      (u8 Copy_u8IRQNum)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	u8 Local_u8RegIndex,Local_u8BitNum;
	if(Copy_u8IRQNum <= 239)
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2bef      	cmp	r3, #239	; 0xef
 8000c62:	d810      	bhi.n	8000c86 <NVIC_u8EnableInterrupt+0x36>
	{
		Local_u8ErrorState = STD_TYPES_OK;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
		Local_u8RegIndex = Copy_u8IRQNum/32;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	73bb      	strb	r3, [r7, #14]
		Local_u8BitNum   = Copy_u8IRQNum%32;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 031f 	and.w	r3, r3, #31
 8000c74:	737b      	strb	r3, [r7, #13]
		NVIC->ISER[Local_u8RegIndex] = (1<<Local_u8BitNum);
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	fa02 f103 	lsl.w	r1, r2, r3
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <NVIC_u8EnableInterrupt+0x44>)
 8000c80:	7bbb      	ldrb	r3, [r7, #14]
 8000c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return Local_u8ErrorState;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <NVIC_SetPriority>:
		*Copy_pu8ActiveFlagState = GETBit(NVIC->IABR[Local_u8RegIndex],Local_u8BitNum);
	}
	return Local_u8ErrorState;
}
u8 NVIC_SetPriority            (u8 Copy_u8IRQNum,u8 Copy_u8GrpPriority,u8 Copy_u8SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	71bb      	strb	r3, [r7, #6]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorState = STD_TYPES_OK;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
	if((Copy_u8IRQNum < 240) && (Copy_u8GrpPriority <= NVIC_u8_GRP_PRI_3) && (Copy_u8SubPriority <= NVIC_u8_SUB_PRI_3))
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2bef      	cmp	r3, #239	; 0xef
 8000cb2:	d818      	bhi.n	8000ce6 <NVIC_SetPriority+0x4e>
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d815      	bhi.n	8000ce6 <NVIC_SetPriority+0x4e>
 8000cba:	797b      	ldrb	r3, [r7, #5]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d812      	bhi.n	8000ce6 <NVIC_SetPriority+0x4e>
	{
		/* Init Priority Field *//* 2 Grp Priority field and 2 Sub Priority field */
		SCB_u32_AIRCR_REG = 0x05FA0500;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <NVIC_SetPriority+0x60>)
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <NVIC_SetPriority+0x64>)
 8000cc4:	601a      	str	r2, [r3, #0]

		NVIC->IPR[Copy_u8IRQNum] = ((Copy_u8GrpPriority<<6) | (Copy_u8SubPriority<<4));
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	b25a      	sxtb	r2, r3
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b259      	sxtb	r1, r3
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <NVIC_SetPriority+0x68>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	b2c9      	uxtb	r1, r1
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000ce4:	e001      	b.n	8000cea <NVIC_SetPriority+0x52>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed0c 	.word	0xe000ed0c
 8000cfc:	05fa0500 	.word	0x05fa0500
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <RCC_SelectSysClk>:
 #include"RCC_Configration.h"
 #include"RCC_interface.h"

 
 void RCC_SelectSysClk(void)
 {
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
			 while(!GETBit(RCC->RCC_CR,HSIRDY));					//Wait till HSI to be Ready
			 RCC->RCC_CFGR&=~(0b11<<SW) ;
		 RCC->RCC_CFGR|= (RCC_SYSTEM_CLK<<SW) ;					//select HSI AS SYS CLK
		/*****************************************************************/
	#elif RCC_SYSTEM_CLK == HSE_SELECTED_AS_SYS_CLK
		 SETBit(RCC->RCC_CR,HSEON);								//Enable HSE Clock
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
		 while(!GETBit(RCC->RCC_CR,HSERDY));						//Wait till HSE to be Ready
 8000d14:	bf00      	nop
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	0c5b      	lsrs	r3, r3, #17
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <RCC_SelectSysClk+0x12>
		 RCC->RCC_CFGR&=~(0b11<<SW) ;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	6053      	str	r3, [r2, #4]
		 RCC->RCC_CFGR |= (RCC_SYSTEM_CLK<<SW) ;				//select HSE AS SYS CLK
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <RCC_SelectSysClk+0x40>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6053      	str	r3, [r2, #4]
	#if	MCO_ENABLE
		 RCC->RCC_CFGR|= (MCO_CLK_SRC<<MCO);
  	#endif

           /*****************************************************************/
 }
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <RCC_Enable_peripheralClk>:
 void RCC_Enable_peripheralClk(u8 RCC_u8peripheralId)
 {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	 if(RCC_u8peripheralId<32)
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2b1f      	cmp	r3, #31
 8000d56:	d80a      	bhi.n	8000d6e <RCC_Enable_peripheralClk+0x26>
	 {
		 SETBit(RCC->RCC_AHBENR,RCC_u8peripheralId);
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	2101      	movs	r1, #1
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	4611      	mov	r1, r2
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6153      	str	r3, [r2, #20]
	 {
		 SETBit(RCC->RCC_APB1ENR,(RCC_u8peripheralId-APB1ENR_offset));
	 }
	 else{}
	 
 }
 8000d6c:	e01c      	b.n	8000da8 <RCC_Enable_peripheralClk+0x60>
	 else if(RCC_u8peripheralId<64)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b3f      	cmp	r3, #63	; 0x3f
 8000d72:	d80b      	bhi.n	8000d8c <RCC_Enable_peripheralClk+0x44>
		 SETBit(RCC->RCC_APB2ENR,(RCC_u8peripheralId-APB2ENR_offset));
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	3a20      	subs	r2, #32
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	4611      	mov	r1, r2
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000d86:	430b      	orrs	r3, r1
 8000d88:	6193      	str	r3, [r2, #24]
 }
 8000d8a:	e00d      	b.n	8000da8 <RCC_Enable_peripheralClk+0x60>
	 else if(RCC_u8peripheralId<96)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b5f      	cmp	r3, #95	; 0x5f
 8000d90:	d80a      	bhi.n	8000da8 <RCC_Enable_peripheralClk+0x60>
		 SETBit(RCC->RCC_APB1ENR,(RCC_u8peripheralId-APB1ENR_offset));
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	79fa      	ldrb	r2, [r7, #7]
 8000d98:	3a40      	subs	r2, #64	; 0x40
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	4611      	mov	r1, r2
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <RCC_Enable_peripheralClk+0x6c>)
 8000da4:	430b      	orrs	r3, r1
 8000da6:	61d3      	str	r3, [r2, #28]
 }
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <USART_Init>:
static u8 StatusFlag=0;



void USART_Init (USART_Config * Copy_PStrUSART_Config)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	u32 baudrate=Copy_PStrUSART_Config->BaudRate;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	613b      	str	r3, [r7, #16]
	u16 mantissa=0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	82fb      	strh	r3, [r7, #22]
	u8 fraction=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	757b      	strb	r3, [r7, #21]
	/****************************** Calculating BaudRate value *****************************************/
	baudrate=baudrate*16;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	011b      	lsls	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
	float BBR_value;
	BBR_value =  (USART_CLK_SYSTEM/(float)(baudrate));
 8000dd4:	6938      	ldr	r0, [r7, #16]
 8000dd6:	f7ff fc5d 	bl	8000694 <__aeabi_ui2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	487e      	ldr	r0, [pc, #504]	; (8000fd8 <USART_Init+0x220>)
 8000de0:	f7ff fd64 	bl	80008ac <__aeabi_fdiv>
 8000de4:	4603      	mov	r3, r0
 8000de6:	60fb      	str	r3, [r7, #12]
	mantissa  =  BBR_value;
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f7ff fdfb 	bl	80009e4 <__aeabi_f2uiz>
 8000dee:	4603      	mov	r3, r0
 8000df0:	82fb      	strh	r3, [r7, #22]
	BBR_value -= mantissa;
 8000df2:	8afb      	ldrh	r3, [r7, #22]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc51 	bl	800069c <__aeabi_i2f>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f7ff fb96 	bl	8000530 <__aeabi_fsub>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
	fraction  =  (BBR_value*16) + 0.5;
 8000e08:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff fc99 	bl	8000744 <__aeabi_fmul>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fb0f 	bl	8000438 <__aeabi_f2d>
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <USART_Init+0x224>)
 8000e20:	f7ff f9ac 	bl	800017c <__adddf3>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f7ff fb5c 	bl	80004e8 <__aeabi_d2uiz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	757b      	strb	r3, [r7, #21]
	if(fraction>15)
 8000e34:	7d7b      	ldrb	r3, [r7, #21]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d905      	bls.n	8000e46 <USART_Init+0x8e>
	{
		mantissa++;
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	82fb      	strh	r3, [r7, #22]
		fraction--;
 8000e40:	7d7b      	ldrb	r3, [r7, #21]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	757b      	strb	r3, [r7, #21]
	}
	
	/****************************** Setting BaudRate value ***********************************************/

	USART_APStr[Copy_PStrUSART_Config->UART_ID]->BRR  = 0;    														//clear BRR
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	791b      	ldrb	r3, [r3, #4]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b64      	ldr	r3, [pc, #400]	; (8000fe0 <USART_Init+0x228>)
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
	USART_APStr[Copy_PStrUSART_Config->UART_ID]->BRR |= (mantissa<<DIV_Mantissa)|(fraction<<DIV_Fraction);		 	//set BRR
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <USART_Init+0x228>)
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	8afb      	ldrh	r3, [r7, #22]
 8000e66:	0119      	lsls	r1, r3, #4
 8000e68:	7d7b      	ldrb	r3, [r7, #21]
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	4618      	mov	r0, r3
 8000e74:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <USART_Init+0x228>)
 8000e76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]

	/****************************** Setting WordLength Mode **********************************************/

	CLRBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1,M);														//clear word length bit
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <USART_Init+0x228>)
 8000e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	791b      	ldrb	r3, [r3, #4]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <USART_Init+0x228>)
 8000e94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e9c:	60da      	str	r2, [r3, #12]
	USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1 |= ((Copy_PStrUSART_Config->Wordlength)<<M);					//set word length
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b4e      	ldr	r3, [pc, #312]	; (8000fe0 <USART_Init+0x228>)
 8000ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	031b      	lsls	r3, r3, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791b      	ldrb	r3, [r3, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <USART_Init+0x228>)
 8000ebc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	60da      	str	r2, [r3, #12]

	/****************************** Setting StopBit Mode *************************************************/

	CLRBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR2,STOP);													//clear stop 1st_bit
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b45      	ldr	r3, [pc, #276]	; (8000fe0 <USART_Init+0x228>)
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4b41      	ldr	r3, [pc, #260]	; (8000fe0 <USART_Init+0x228>)
 8000eda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ee2:	611a      	str	r2, [r3, #16]
	CLRBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR2,(STOP+1));												//clear stop 2nd_bit
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <USART_Init+0x228>)
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <USART_Init+0x228>)
 8000efa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f02:	611a      	str	r2, [r3, #16]
	USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR2 |= ((Copy_PStrUSART_Config->Stopbit_Mode)<<STOP);				//set stop bit
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	791b      	ldrb	r3, [r3, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <USART_Init+0x228>)
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	799b      	ldrb	r3, [r3, #6]
 8000f16:	031b      	lsls	r3, r3, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	791b      	ldrb	r3, [r3, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <USART_Init+0x228>)
 8000f22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	611a      	str	r2, [r3, #16]

	/****************************** Setting parityBit Mode ***********************************************/

	CLRBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1,PS);													//clear parity bit
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <USART_Init+0x228>)
 8000f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <USART_Init+0x228>)
 8000f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f48:	60da      	str	r2, [r3, #12]
	USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1 |= ((Copy_PStrUSART_Config->Parity_Bit)<<PS);					//set sparity bit
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <USART_Init+0x228>)
 8000f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	79db      	ldrb	r3, [r3, #7]
 8000f5c:	025b      	lsls	r3, r3, #9
 8000f5e:	4619      	mov	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	791b      	ldrb	r3, [r3, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <USART_Init+0x228>)
 8000f68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	60da      	str	r2, [r3, #12]

	/***************************************** Enable UART **********************************************/
	SETBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1,UE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <USART_Init+0x228>)
 8000f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <USART_Init+0x228>)
 8000f86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f8e:	60da      	str	r2, [r3, #12]
	SETBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1,TE);													//Enable transmitter
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <USART_Init+0x228>)
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <USART_Init+0x228>)
 8000fa6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000faa:	f042 0208 	orr.w	r2, r2, #8
 8000fae:	60da      	str	r2, [r3, #12]
	SETBit(USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1,RE);													//Enable reciever
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	791b      	ldrb	r3, [r3, #4]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <USART_Init+0x228>)
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <USART_Init+0x228>)
 8000fc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fca:	f042 0204 	orr.w	r2, r2, #4
 8000fce:	60da      	str	r2, [r3, #12]



}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	4af42400 	.word	0x4af42400
 8000fdc:	3fe00000 	.word	0x3fe00000
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <USART1_IRQHandler>:
	USART_GArrPChar[Copy_PStrUSART_Config->UART_ID]=Copy_String;
	SETBit((USART_APStr[Copy_PStrUSART_Config->UART_ID]->CR1),TXEIE);
}
/******************************************************************************************************/
void USART1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	//CLRBit(USART1->CR1,TCIE);
	//CLRBit(USART1->CR1,RXNEIE);
	//CLRBit(USART1->CR1,TXEIE);

	if(GETBit(USART1->SR,RXNE)&&StatusFlag!=2)
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <USART1_IRQHandler+0xcc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	095b      	lsrs	r3, r3, #5
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d029      	beq.n	800104a <USART1_IRQHandler+0x66>
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <USART1_IRQHandler+0xd0>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d025      	beq.n	800104a <USART1_IRQHandler+0x66>
		{
		USART_GArrPChar[0][USART_Index[0]]=USART1->DR;
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <USART1_IRQHandler+0xcc>)
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <USART1_IRQHandler+0xd4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4413      	add	r3, r2
 800100c:	b2ca      	uxtb	r2, r1
 800100e:	701a      	strb	r2, [r3, #0]
		if((USART_GArrPChar[0][USART_Index[0]])=='\r')
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <USART1_IRQHandler+0xd4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b0d      	cmp	r3, #13
 800101e:	d10e      	bne.n	800103e <USART1_IRQHandler+0x5a>
				{
					USART_APFun[0]();
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <USART1_IRQHandler+0xdc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4798      	blx	r3
					CLRBit(USART1->CR1,RXNEIE);
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <USART1_IRQHandler+0xcc>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <USART1_IRQHandler+0xcc>)
 800102c:	f023 0320 	bic.w	r3, r3, #32
 8001030:	60d3      	str	r3, [r2, #12]
					USART_Index[0]=0;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
					StatusFlag=0;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <USART1_IRQHandler+0xd0>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				}
		USART_Index[0]++;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001048:	701a      	strb	r2, [r3, #0]
		}
	if(GETBit(USART1->SR,TXE)&&StatusFlag==2)
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <USART1_IRQHandler+0xcc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	09db      	lsrs	r3, r3, #7
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d028      	beq.n	80010aa <USART1_IRQHandler+0xc6>
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <USART1_IRQHandler+0xd0>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d124      	bne.n	80010aa <USART1_IRQHandler+0xc6>
	{
		USART1->DR=USART_GArrPChar[0][USART_Index[0]];
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <USART1_IRQHandler+0xd4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a15      	ldr	r2, [pc, #84]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	4413      	add	r3, r2
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <USART1_IRQHandler+0xcc>)
 800106e:	605a      	str	r2, [r3, #4]
		if((USART_GArrPChar[0][USART_Index[0]])=='\0')
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <USART1_IRQHandler+0xd4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a11      	ldr	r2, [pc, #68]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10e      	bne.n	800109e <USART1_IRQHandler+0xba>
		{
			USART_APFun[0]();
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <USART1_IRQHandler+0xdc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4798      	blx	r3
			CLRBit(USART1->CR1,TXEIE);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <USART1_IRQHandler+0xcc>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <USART1_IRQHandler+0xcc>)
 800108c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001090:	60d3      	str	r3, [r2, #12]
			USART_Index[0]=0;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <USART1_IRQHandler+0xd8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			StatusFlag=0;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <USART1_IRQHandler+0xd0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}
		USART_Index[0]++;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <USART1_IRQHandler+0xd8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <USART1_IRQHandler+0xd8>)
 80010a8:	701a      	strb	r2, [r3, #0]

	}


}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40013800 	.word	0x40013800
 80010b4:	20002f5b 	.word	0x20002f5b
 80010b8:	20002f4c 	.word	0x20002f4c
 80010bc:	20002f58 	.word	0x20002f58
 80010c0:	20002f40 	.word	0x20002f40

080010c4 <USART1_SendByDMA>:
/******************************************************************************************************/
void USART1_SendByDMA(USART_DMAConfig * Copy_USARTPStr)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	*MemAdd;
	NumOfData;
	MINC_mode;
	CIRC_mode;*/
	u8 Channel_Id;
	if(Copy_USARTPStr->UART_ID==USART1_ID)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <USART1_SendByDMA+0x16>
	{
		Channel_Id=3;
 80010d4:	2303      	movs	r3, #3
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e00c      	b.n	80010f4 <USART1_SendByDMA+0x30>
	}
	else if(Copy_USARTPStr->UART_ID==USART2_ID)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <USART1_SendByDMA+0x24>
	{
		Channel_Id=5;
 80010e2:	2305      	movs	r3, #5
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e005      	b.n	80010f4 <USART1_SendByDMA+0x30>
	}
	else if(Copy_USARTPStr->UART_ID==USART3_ID)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d101      	bne.n	80010f4 <USART1_SendByDMA+0x30>
	{
		Channel_Id=2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	73fb      	strb	r3, [r7, #15]
	}
	else{}
	/*enable DMA receiver*/
	SETBit(USART_APStr[Copy_USARTPStr->UART_ID]->CR3,DMAT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <USART1_SendByDMA+0x164>)
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4b47      	ldr	r3, [pc, #284]	; (8001228 <USART1_SendByDMA+0x164>)
 800110a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800110e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001112:	615a      	str	r2, [r3, #20]
	/*disable the channel*/
	CLRBit(DMA->CHANNEL[Channel_Id].CCR,0);
 8001114:	4945      	ldr	r1, [pc, #276]	; (800122c <USART1_SendByDMA+0x168>)
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3308      	adds	r3, #8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4841      	ldr	r0, [pc, #260]	; (800122c <USART1_SendByDMA+0x168>)
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	f023 0101 	bic.w	r1, r3, #1
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4403      	add	r3, r0
 8001138:	3308      	adds	r3, #8
 800113a:	6019      	str	r1, [r3, #0]
	/*Clear DMA control register*/
	DMA->CHANNEL[Channel_Id].CCR=0;
 800113c:	493b      	ldr	r1, [pc, #236]	; (800122c <USART1_SendByDMA+0x168>)
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	3308      	adds	r3, #8
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
	DMA->CHANNEL[Channel_Id].CCR=(Copy_USARTPStr->Channel_Priority<<12)|((Copy_USARTPStr->MINC_mode)<<7);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7a9b      	ldrb	r3, [r3, #10]
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	4313      	orrs	r3, r2
 800115e:	4933      	ldr	r1, [pc, #204]	; (800122c <USART1_SendByDMA+0x168>)
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	4618      	mov	r0, r3
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	3308      	adds	r3, #8
 8001170:	6018      	str	r0, [r3, #0]
	DMA->CHANNEL[Channel_Id].CCR|=(Copy_USARTPStr->CIRC_mode<<5)|(1<<4);
 8001172:	492e      	ldr	r1, [pc, #184]	; (800122c <USART1_SendByDMA+0x168>)
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	3308      	adds	r3, #8
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	7ad2      	ldrb	r2, [r2, #11]
 8001188:	0152      	lsls	r2, r2, #5
 800118a:	4313      	orrs	r3, r2
 800118c:	4827      	ldr	r0, [pc, #156]	; (800122c <USART1_SendByDMA+0x168>)
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	f043 0110 	orr.w	r1, r3, #16
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4403      	add	r3, r0
 800119e:	3308      	adds	r3, #8
 80011a0:	6019      	str	r1, [r3, #0]
	/*Set memory address*/
	DMA->CHANNEL[Channel_Id].CMAR=(u32)Copy_USARTPStr->MemAdd;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4921      	ldr	r1, [pc, #132]	; (800122c <USART1_SendByDMA+0x168>)
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	4618      	mov	r0, r3
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	3314      	adds	r3, #20
 80011b8:	6018      	str	r0, [r3, #0]
	/*Set pripheral address as USART Data register*/
	DMA->CHANNEL[Channel_Id].CPAR=(u32)(&USART_APStr[Copy_USARTPStr->UART_ID]->DR);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <USART1_SendByDMA+0x164>)
 80011c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c6:	3304      	adds	r3, #4
 80011c8:	4918      	ldr	r1, [pc, #96]	; (800122c <USART1_SendByDMA+0x168>)
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	4618      	mov	r0, r3
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3310      	adds	r3, #16
 80011da:	6018      	str	r0, [r3, #0]
	/*set number of transfered data */
	DMA->CHANNEL[Channel_Id].CNDTR=Copy_USARTPStr->NumOfData;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	891b      	ldrh	r3, [r3, #8]
 80011e0:	4912      	ldr	r1, [pc, #72]	; (800122c <USART1_SendByDMA+0x168>)
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	4618      	mov	r0, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	330c      	adds	r3, #12
 80011f2:	6018      	str	r0, [r3, #0]
	/*enable the channel*/
	SETBit(DMA->CHANNEL[Channel_Id].CCR,0);
 80011f4:	490d      	ldr	r1, [pc, #52]	; (800122c <USART1_SendByDMA+0x168>)
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3308      	adds	r3, #8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <USART1_SendByDMA+0x168>)
 8001208:	7bfa      	ldrb	r2, [r7, #15]
 800120a:	f043 0101 	orr.w	r1, r3, #1
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4403      	add	r3, r0
 8001218:	3308      	adds	r3, #8
 800121a:	6019      	str	r1, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000000c 	.word	0x2000000c
 800122c:	40020000 	.word	0x40020000

08001230 <USART1_receiveByDMA>:
/******************************************************************************************************/
void USART1_receiveByDMA(USART_DMAConfig * Copy_USARTPStr)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	Channel_Priority;
	*MemAdd;
	NumOfData;
	MINC_mode;
	CIRC_mode;*/	u8 Channel_Id;
	if(Copy_USARTPStr->UART_ID==USART1_ID)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <USART1_receiveByDMA+0x16>
	{
		Channel_Id=4;
 8001240:	2304      	movs	r3, #4
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e00c      	b.n	8001260 <USART1_receiveByDMA+0x30>
	}
	else if(Copy_USARTPStr->UART_ID==USART2_ID)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d102      	bne.n	8001254 <USART1_receiveByDMA+0x24>
	{
		Channel_Id=5;
 800124e:	2305      	movs	r3, #5
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e005      	b.n	8001260 <USART1_receiveByDMA+0x30>
	}
	else if(Copy_USARTPStr->UART_ID==USART3_ID)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d101      	bne.n	8001260 <USART1_receiveByDMA+0x30>
	{
		Channel_Id=2;
 800125c:	2302      	movs	r3, #2
 800125e:	73fb      	strb	r3, [r7, #15]
	}
	else{}
	/*enable DMA receiver*/
	SETBit(USART_APStr[Copy_USARTPStr->UART_ID]->CR3,DMAR);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <USART1_receiveByDMA+0x160>)
 8001268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <USART1_receiveByDMA+0x160>)
 8001276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800127a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800127e:	615a      	str	r2, [r3, #20]
	/*disable the channel*/
	CLRBit(DMA->CHANNEL[Channel_Id].CCR,0);
 8001280:	4944      	ldr	r1, [pc, #272]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	3308      	adds	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4840      	ldr	r0, [pc, #256]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001294:	7bfa      	ldrb	r2, [r7, #15]
 8001296:	f023 0101 	bic.w	r1, r3, #1
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4403      	add	r3, r0
 80012a4:	3308      	adds	r3, #8
 80012a6:	6019      	str	r1, [r3, #0]
	/*Clear DMA control register*/
	DMA->CHANNEL[Channel_Id].CCR=0;
 80012a8:	493a      	ldr	r1, [pc, #232]	; (8001394 <USART1_receiveByDMA+0x164>)
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	3308      	adds	r3, #8
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
	DMA->CHANNEL[Channel_Id].CCR=(Copy_USARTPStr->Channel_Priority<<12)|((Copy_USARTPStr->MINC_mode)<<7);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	031a      	lsls	r2, r3, #12
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a9b      	ldrb	r3, [r3, #10]
 80012c6:	01db      	lsls	r3, r3, #7
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4932      	ldr	r1, [pc, #200]	; (8001394 <USART1_receiveByDMA+0x164>)
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	4618      	mov	r0, r3
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3308      	adds	r3, #8
 80012dc:	6018      	str	r0, [r3, #0]
	DMA->CHANNEL[Channel_Id].CCR|=(Copy_USARTPStr->CIRC_mode<<5);
 80012de:	492d      	ldr	r1, [pc, #180]	; (8001394 <USART1_receiveByDMA+0x164>)
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	3308      	adds	r3, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	7ad2      	ldrb	r2, [r2, #11]
 80012f4:	0152      	lsls	r2, r2, #5
 80012f6:	4611      	mov	r1, r2
 80012f8:	4826      	ldr	r0, [pc, #152]	; (8001394 <USART1_receiveByDMA+0x164>)
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	4319      	orrs	r1, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3308      	adds	r3, #8
 800130a:	6019      	str	r1, [r3, #0]
	/*Set memory address*/
	DMA->CHANNEL[Channel_Id].CMAR=(u32)Copy_USARTPStr->MemAdd;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4920      	ldr	r1, [pc, #128]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001312:	7bfa      	ldrb	r2, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	3314      	adds	r3, #20
 8001322:	6018      	str	r0, [r3, #0]
	/*Set pripheral address as USART Data register*/
	DMA->CHANNEL[Channel_Id].CPAR=(u32)(&USART_APStr[Copy_USARTPStr->UART_ID]->DR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <USART1_receiveByDMA+0x160>)
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	3304      	adds	r3, #4
 8001332:	4918      	ldr	r1, [pc, #96]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	4618      	mov	r0, r3
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	3310      	adds	r3, #16
 8001344:	6018      	str	r0, [r3, #0]
	/*set number of transfered data */
	DMA->CHANNEL[Channel_Id].CNDTR=Copy_USARTPStr->NumOfData;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	891b      	ldrh	r3, [r3, #8]
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <USART1_receiveByDMA+0x164>)
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	4618      	mov	r0, r3
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	330c      	adds	r3, #12
 800135c:	6018      	str	r0, [r3, #0]
	/*enable the channel*/
	SETBit(DMA->CHANNEL[Channel_Id].CCR,0);
 800135e:	490d      	ldr	r1, [pc, #52]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3308      	adds	r3, #8
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <USART1_receiveByDMA+0x164>)
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	f043 0101 	orr.w	r1, r3, #1
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4403      	add	r3, r0
 8001382:	3308      	adds	r3, #8
 8001384:	6019      	str	r1, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	2000000c 	.word	0x2000000c
 8001394:	40020000 	.word	0x40020000

08001398 <main>:
u8 x[6000]="0";
USART_DMAConfig comSend={USART1_ID,DMA_PriortyLow,y,50,Enable,Disable};
USART_DMAConfig comRcv={USART1_ID,DMA_PriortyLow,x,5,Enable,Disable};

int main(void)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
	RCC_SelectSysClk();
 800139e:	f7ff fcb1 	bl	8000d04 <RCC_SelectSysClk>
	RCC_Enable_peripheralClk(USART1EN);
 80013a2:	202e      	movs	r0, #46	; 0x2e
 80013a4:	f7ff fcd0 	bl	8000d48 <RCC_Enable_peripheralClk>
	RCC_Enable_peripheralClk(IOPAEN);
 80013a8:	2022      	movs	r0, #34	; 0x22
 80013aa:	f7ff fccd 	bl	8000d48 <RCC_Enable_peripheralClk>
	RCC_Enable_peripheralClk(IOPCEN);
 80013ae:	2024      	movs	r0, #36	; 0x24
 80013b0:	f7ff fcca 	bl	8000d48 <RCC_Enable_peripheralClk>
	RCC_Enable_peripheralClk(DMA1EN);
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fcc7 	bl	8000d48 <RCC_Enable_peripheralClk>
	STK_Init();
 80013ba:	f000 f83d 	bl	8001438 <STK_Init>
	NVIC_SetPriority(37,1,1);
 80013be:	2201      	movs	r2, #1
 80013c0:	2101      	movs	r1, #1
 80013c2:	2025      	movs	r0, #37	; 0x25
 80013c4:	f7ff fc68 	bl	8000c98 <NVIC_SetPriority>
	NVIC_u8EnableInterrupt(37);
 80013c8:	2025      	movs	r0, #37	; 0x25
 80013ca:	f7ff fc41 	bl	8000c50 <NVIC_u8EnableInterrupt>
	GPIO_PinMode_Init(&UART_TX);
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <main+0x84>)
 80013d0:	f7ff fb82 	bl	8000ad8 <GPIO_PinMode_Init>
	GPIO_PinMode_Init(&UART_RX);
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <main+0x88>)
 80013d6:	f7ff fb7f 	bl	8000ad8 <GPIO_PinMode_Init>
	GPIO_PinMode_Init(&integrated_LED);
 80013da:	4812      	ldr	r0, [pc, #72]	; (8001424 <main+0x8c>)
 80013dc:	f7ff fb7c 	bl	8000ad8 <GPIO_PinMode_Init>
	USART_Init(&com1);
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <main+0x90>)
 80013e2:	f7ff fce9 	bl	8000db8 <USART_Init>
	DMA_ChannelConfig_t ziad={CH1,DMA_PriortyLow,_8_bits,_8_bits,Read_from_peripheral,x,y,100,Enable,Enable,Enable,Disable,Disable,Disable,Disable};
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <main+0x94>)
 80013e8:	1d3c      	adds	r4, r7, #4
 80013ea:	461d      	mov	r5, r3
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	DMA_Init(&ziad);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb12 	bl	8000a24 <DMA_Init>
	//DMA_Start(&ziad);

	//USART_Async_RecieveString(&com1,x,toggle);
	//USART_Async_SendString(&com1,y,toggle);
	USART1_SendByDMA(&comSend);
 8001400:	480b      	ldr	r0, [pc, #44]	; (8001430 <main+0x98>)
 8001402:	f7ff fe5f 	bl	80010c4 <USART1_SendByDMA>
	USART1_receiveByDMA(&comRcv);
 8001406:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x9c>)
 8001408:	f7ff ff12 	bl	8001230 <USART1_receiveByDMA>
	while(1)
	{
		GPIO_TogglePin(&integrated_LED);
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <main+0x8c>)
 800140e:	f7ff fbff 	bl	8000c10 <GPIO_TogglePin>
		STK_Delay_ms(1000);
 8001412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001416:	f000 f83d 	bl	8001494 <STK_Delay_ms>
		GPIO_TogglePin(&integrated_LED);
 800141a:	e7f7      	b.n	800140c <main+0x74>
 800141c:	2000001c 	.word	0x2000001c
 8001420:	20000020 	.word	0x20000020
 8001424:	20000018 	.word	0x20000018
 8001428:	20000024 	.word	0x20000024
 800142c:	080015c8 	.word	0x080015c8
 8001430:	20002f0c 	.word	0x20002f0c
 8001434:	20002f18 	.word	0x20002f18

08001438 <STK_Init>:

static void (*STK_GPF)(void) = NULL;
static u8 STK_busyFlag = 0;

void STK_Init(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
	STK->CTRL |= (STK_PRESCELER<<CLKSOURCE);
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <STK_Init+0x14>)
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <STK_Init+0x14>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	e000e010 	.word	0xe000e010

08001450 <STK_Enable>:
void STK_Enable(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	SETBit(STK->CTRL,ENABLE);
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <STK_Enable+0x18>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <STK_Enable+0x18>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	e000e010 	.word	0xe000e010

0800146c <STK_Disable>:
void STK_Disable(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	CLRBit(STK->CTRL,ENABLE);
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <STK_Disable+0x24>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <STK_Disable+0x24>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]
	(STK->LOAD) = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <STK_Disable+0x24>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
	(STK->VAL)  = 0;
 8001482:	4b03      	ldr	r3, [pc, #12]	; (8001490 <STK_Disable+0x24>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]

}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	e000e010 	.word	0xe000e010

08001494 <STK_Delay_ms>:
u32  STK_RemainingTime(void)
{
	return (STK->VAL);
}
void STK_Delay_ms(u32 DelayTime)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if(STK_PRESCELER == AHB_DIVIDED_BY_8)
	{
		(STK->LOAD)= DelayTime * 1000;
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <STK_Delay_ms+0x38>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	6053      	str	r3, [r2, #4]
	else if(STK_PRESCELER == PROCESSOR_CLOCK)
	{
		(STK->LOAD)= DelayTime * 8000;
	}
	else {}
	STK_Enable();
 80014aa:	f7ff ffd1 	bl	8001450 <STK_Enable>
	while(!GETBit(STK->CTRL,COUNTFLAG));
 80014ae:	bf00      	nop
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <STK_Delay_ms+0x38>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f8      	beq.n	80014b0 <STK_Delay_ms+0x1c>
	STK_Disable();
 80014be:	f7ff ffd5 	bl	800146c <STK_Disable>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <SysTick_Handler>:
		STK_GPF = STK_PF;
		STK_Enable();
}

void SysTick_Handler (void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	if(STK_busyFlag==2)
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <SysTick_Handler+0x38>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d107      	bne.n	80014ec <SysTick_Handler+0x1c>
	{
		STK_Disable();
 80014dc:	f7ff ffc6 	bl	800146c <STK_Disable>
		CLRBit(STK->CTRL,TICKINT);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <SysTick_Handler+0x3c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a09      	ldr	r2, [pc, #36]	; (800150c <SysTick_Handler+0x3c>)
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	6013      	str	r3, [r2, #0]
	}
	STK_GPF();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <SysTick_Handler+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4798      	blx	r3
	STK_busyFlag= GETBit(STK->CTRL,COUNTFLAG);
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <SysTick_Handler+0x3c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b01      	ldr	r3, [pc, #4]	; (8001508 <SysTick_Handler+0x38>)
 8001502:	701a      	strb	r2, [r3, #0]


}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20002f60 	.word	0x20002f60
 800150c:	e000e010 	.word	0xe000e010
 8001510:	20002f5c 	.word	0x20002f5c

08001514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001518:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001542:	f000 f811 	bl	8001568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001546:	f7ff ff27 	bl	8001398 <main>

0800154a <LoopForever>:

LoopForever:
    b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   r0, =_estack
 800154c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20002f24 	.word	0x20002f24
  ldr r2, =_sidata
 8001558:	080015ec 	.word	0x080015ec
  ldr r2, =_sbss
 800155c:	20002f24 	.word	0x20002f24
  ldr r4, =_ebss
 8001560:	20002f64 	.word	0x20002f64

08001564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>
	...

08001568 <__libc_init_array>:
 8001568:	b570      	push	{r4, r5, r6, lr}
 800156a:	2600      	movs	r6, #0
 800156c:	4d0c      	ldr	r5, [pc, #48]	; (80015a0 <__libc_init_array+0x38>)
 800156e:	4c0d      	ldr	r4, [pc, #52]	; (80015a4 <__libc_init_array+0x3c>)
 8001570:	1b64      	subs	r4, r4, r5
 8001572:	10a4      	asrs	r4, r4, #2
 8001574:	42a6      	cmp	r6, r4
 8001576:	d109      	bne.n	800158c <__libc_init_array+0x24>
 8001578:	f000 f81a 	bl	80015b0 <_init>
 800157c:	2600      	movs	r6, #0
 800157e:	4d0a      	ldr	r5, [pc, #40]	; (80015a8 <__libc_init_array+0x40>)
 8001580:	4c0a      	ldr	r4, [pc, #40]	; (80015ac <__libc_init_array+0x44>)
 8001582:	1b64      	subs	r4, r4, r5
 8001584:	10a4      	asrs	r4, r4, #2
 8001586:	42a6      	cmp	r6, r4
 8001588:	d105      	bne.n	8001596 <__libc_init_array+0x2e>
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001590:	4798      	blx	r3
 8001592:	3601      	adds	r6, #1
 8001594:	e7ee      	b.n	8001574 <__libc_init_array+0xc>
 8001596:	f855 3b04 	ldr.w	r3, [r5], #4
 800159a:	4798      	blx	r3
 800159c:	3601      	adds	r6, #1
 800159e:	e7f2      	b.n	8001586 <__libc_init_array+0x1e>
 80015a0:	080015e4 	.word	0x080015e4
 80015a4:	080015e4 	.word	0x080015e4
 80015a8:	080015e4 	.word	0x080015e4
 80015ac:	080015e8 	.word	0x080015e8

080015b0 <_init>:
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	bf00      	nop
 80015b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b6:	bc08      	pop	{r3}
 80015b8:	469e      	mov	lr, r3
 80015ba:	4770      	bx	lr

080015bc <_fini>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr
